{"version":3,"file":"static/js/247.d13dbbdf.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/singleComicPage/SingleComicPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport useMarvelService from \"../../../services/MarvelService\";\r\nimport Spinner from \"../../spinner/Spinner\";\r\nimport ErrorMessage from \"../../errorMessage/ErrorMessage\";\r\nimport \"./singleComicPage.scss\";\r\n\r\nconst SingleComicPage = () => {\r\n  const [comic, setComic] = useState(null);\r\n  const { loading, error, getComic, clearError } = useMarvelService();\r\n  const { comicId } = useParams();\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [comicId]);\r\n\r\n  const updateComic = () => {\r\n    if (!comicId) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getComic(comicId).then(onComicLoaded);\r\n  };\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  };\r\n  \r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({comic}) => {\r\n  const { name, description, thumbnail, pageCount, language, price } = comic;\r\n  let imgStyle = { objectFit: \"cover\" };\r\n\r\n  if (\r\n    thumbnail ===\r\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n    \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <img\r\n        src={thumbnail}\r\n        alt={name}\r\n        className=\"single-comic__img\"\r\n        style={imgStyle}\r\n      />\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">name</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">{pageCount}</p>\r\n        <p className=\"single-comic__descr\">Language: {language}</p>\r\n        <div className=\"single-comic__price\">{price}</div>\r\n      </div>\r\n      <Link to=\"/comics\" className=\"single-comic__back\">\r\n        Back to all\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleComicPage;\r\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\nconst useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      metod = \"GET\",\r\n      body = null,\r\n      heders = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(url, { metod, body, heders });\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null),[]);\r\n\r\n  return {loading, error, request, clearError};\r\n};\r\n\r\nexport default useHttp;\r\n","import md5 from \"js-md5\";\r\nimport useHttp from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _baseOffset = 210;\r\n  const _charLimit = 9;\r\n\r\n  const getTemporaryKey = (url) => {\r\n    const publickey = process.env.REACT_APP_PUB_KEY;\r\n    const privatekey = process.env.REACT_APP_PRV_KEY;\r\n    const ts = new Date().getTime();\r\n    const stringToHash = ts + privatekey + publickey;\r\n    const hash = md5(stringToHash);\r\n    const prefix = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\r\n    return `${prefix}ts=${ts}&apikey=${publickey}&hash=${hash}`;\r\n  };\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const url = `characters?orderBy=name&limit=${_charLimit}&offset=${offset}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const url = `characters/${id}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0, limit = 8) => {\r\n    const url = `comics?limit=${limit}&offset=${offset}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const url = `comics/${id}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n}\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics, i) => {\r\n    return {\r\n      id: comics.id,      \r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","comic","name","description","thumbnail","pageCount","language","price","imgStyle","className","to","useState","setComic","useMarvelService","loading","error","getComic","clearError","comicId","useParams","useEffect","updateComic","then","onComicLoaded","errorMessage","ErrorMessage","spinner","Spinner","content","setLoading","setError","request","useCallback","url","metod","body","heders","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","getTemporaryKey","publickey","process","ts","Date","getTime","stringToHash","hash","md5","prefix","indexOf","getAllCharacters","offset","tempKey","res","results","map","_transformCharacter","getCharacter","id","getAllComics","limit","_transformComics","char","slice","path","extension","homepage","urls","wiki","comics","items","i","title","textObjects","prices"],"sourceRoot":""}