{"version":3,"file":"static/js/551.2e2cb8b2.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.js","hooks/http.hooks.js","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./randomChar.scss\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setState] = useState({});\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    const timerId = setInterval(updateChar, 60000);\r\n\r\n    return () => {\r\n      clearInterval(timerId);\r\n    };\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setState(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button onClick={updateChar} className=\"button button__main\">\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = char;\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (\r\n    thumbnail ===\r\n      \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n    \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className=\"randomchar__img\"\r\n        style={imgStyle}\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport \"./charList.scss\";\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset).then(onCharListLoaded);\r\n  };\r\n\r\n  const onCharListLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    setCharList((charList) => [...charList, ...newCharList]);\r\n    setNewItemLoading((newItemLoading) => false);\r\n    setOffset((offset) => offset + 9);\r\n    setCharEnded((charEnded) => ended);\r\n  };\r\n\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    // Я реализовал вариант чуть сложнее, и с классом и с фокусом\r\n    // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\r\n    // На самом деле, решение с css-классом можно сделать, вынеся персонажа\r\n    // в отдельный компонент. Но кода будет больше, появится новое состояние\r\n    // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\r\n\r\n    // По возможности, не злоупотребляйте рефами, только в крайних случаях\r\n    itemRefs.current.forEach((item) =>\r\n      item.classList.remove(\"char__item_selected\")\r\n    );\r\n    itemRefs.current[id].classList.add(\"char__item_selected\");\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  // Этот метод создан для оптимизации,\r\n  // чтобы не помещать такую конструкцию в метод render\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: \"cover\" };\r\n      if (\r\n        item.thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\r\n        \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n      ) {\r\n        imgStyle = { objectFit: \"unset\" };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition\r\n          key={`${item.id}${i}`}\r\n          timeout={300}\r\n          classNames=\"char__item\"\r\n        >\r\n          <li\r\n            className=\"char__item\"\r\n            tabIndex={0}\r\n            ref={(el) => (itemRefs.current[i] = el)}\r\n            key={item.id}\r\n            onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \" \" || e.key === \"Enter\") {\r\n                props.onCharSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    // А эта конструкция вынесена для центровки спиннера/ошибки\r\n    return(\r\n    <ul className=\"char__grid\">\r\n      <TransitionGroup component={null}>{items}</TransitionGroup>\r\n    </ul>)\r\n  }\r\n\r\n  const items = renderItems(charList);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {items}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: charEnded ? \"none\" : \"block\" }}\r\n        onClick={() => onRequest(offset, false)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId]);\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getCharacter(charId).then(onCharLoaded);\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n \r\n  const skeleton = char || loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (\r\n    thumbnail ===\r\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n    || \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\r\n  ) {\r\n    imgStyle = { objectFit: \"contain\" };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\r\n        {comics.map((item, i) => {\r\n          // eslint-disable-next-line\r\n          if (i > 9) return;\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              {item.name}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n          <CharInfo charId={selectedChar} />\r\n        </ErrorBoundary>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\nconst useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      metod = \"GET\",\r\n      body = null,\r\n      heders = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(url, { metod, body, heders });\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null),[]);\r\n\r\n  return {loading, error, request, clearError};\r\n};\r\n\r\nexport default useHttp;\r\n","import md5 from \"js-md5\";\r\nimport useHttp from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, error, request, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _baseOffset = 210;\r\n  const _charLimit = 9;\r\n\r\n  const getTemporaryKey = (url) => {\r\n    const publickey = process.env.REACT_APP_PUB_KEY;\r\n    const privatekey = process.env.REACT_APP_PRV_KEY;\r\n    const ts = new Date().getTime();\r\n    const stringToHash = ts + privatekey + publickey;\r\n    const hash = md5(stringToHash);\r\n    const prefix = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\r\n    return `${prefix}ts=${ts}&apikey=${publickey}&hash=${hash}`;\r\n  };\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const url = `characters?orderBy=name&limit=${_charLimit}&offset=${offset}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const url = `characters/${id}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0, limit = 8) => {\r\n    const url = `comics?limit=${limit}&offset=${offset}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const url = `comics/${id}`;\r\n    const tempKey = getTemporaryKey(url);\r\n    const res = await request(`${_apiBase}${url}${tempKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n}\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics, i) => {\r\n    return {\r\n      id: comics.id,      \r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorBoundary","state","error","errorInfo","console","log","this","setState","props","children","Component","style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","setChar","charId","skeleton","selectedChar","decoration","setLoading","setError","request","useCallback","url","metod","body","heders","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","getTemporaryKey","publickey","process","ts","Date","getTime","stringToHash","hash","md5","prefix","indexOf","tempKey","res","results","_transformCharacter","getAllComics","limit","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}